/* 
 * Voicify Assistant API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Voicify.Sdk.Assistant.Client;
using Voicify.Sdk.Core.Models.Model;

namespace Voicify.Sdk.Assistant.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBixbyApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actionName"></param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        BixbyResponse HandleCustomRequest (string actionName, string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actionName"></param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        ApiResponse<BixbyResponse> HandleCustomRequestWithHttpInfo (string actionName, string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        BixbyResponse HandleDynamicRequest (string applicationId = null, string applicationSecret = null, BixbyGeneralQuestionRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        ApiResponse<BixbyResponse> HandleDynamicRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyGeneralQuestionRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        BixbyResponse HandleEventGeneralSearchRequest (string applicationId = null, string applicationSecret = null, BixbyEventSearchRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        ApiResponse<BixbyResponse> HandleEventGeneralSearchRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyEventSearchRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        BixbyResponse HandleEventLocationSearchRequest (string applicationId = null, string applicationSecret = null, BixbyEventSearchRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        ApiResponse<BixbyResponse> HandleEventLocationSearchRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyEventSearchRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        BixbyResponse HandleEventStartTimeSearchRequest (string applicationId = null, string applicationSecret = null, BixbyEventSearchRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        ApiResponse<BixbyResponse> HandleEventStartTimeSearchRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyEventSearchRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        BixbyResponse HandleEventStatusSearchRequest (string applicationId = null, string applicationSecret = null, BixbyEventSearchRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        ApiResponse<BixbyResponse> HandleEventStatusSearchRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyEventSearchRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        BixbyResponse HandleGeneralQuestionRequest (string applicationId = null, string applicationSecret = null, BixbyGeneralQuestionRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        ApiResponse<BixbyResponse> HandleGeneralQuestionRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyGeneralQuestionRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        BixbyResponse HandleGoToStepRequest (string applicationId = null, string applicationSecret = null, BixbyGoToStepRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        ApiResponse<BixbyResponse> HandleGoToStepRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyGoToStepRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        BixbyResponse HandleHelpRequest (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        ApiResponse<BixbyResponse> HandleHelpRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        BixbyResponse HandleLatestMessageRequest (string applicationId = null, string applicationSecret = null, BixbyLatestMessageRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        ApiResponse<BixbyResponse> HandleLatestMessageRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyLatestMessageRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        BixbyResponse HandleListItemSelectRequest (string applicationId = null, string applicationSecret = null, BixbyItemSelectedRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        ApiResponse<BixbyResponse> HandleListItemSelectRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyItemSelectedRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        BixbyResponse HandleMoreRequest (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        ApiResponse<BixbyResponse> HandleMoreRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        BixbyResponse HandleNextRequest (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        ApiResponse<BixbyResponse> HandleNextRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        BixbyResponse HandleNoRequest (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        ApiResponse<BixbyResponse> HandleNoRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        BixbyResponse HandleNumberRequest (string applicationId = null, string applicationSecret = null, BixbyNumberRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        ApiResponse<BixbyResponse> HandleNumberRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyNumberRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        BixbyResponse HandlePrevisousRequest (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        ApiResponse<BixbyResponse> HandlePrevisousRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        BixbyResponse HandleRecipeDetailsRequest (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        ApiResponse<BixbyResponse> HandleRecipeDetailsRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        BixbyResponse HandleRecipeSearchRequest (string applicationId = null, string applicationSecret = null, BixbyRecipeSearchRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        ApiResponse<BixbyResponse> HandleRecipeSearchRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyRecipeSearchRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        BixbyResponse HandleStartOverRequest (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        ApiResponse<BixbyResponse> HandleStartOverRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        BixbyResponse HandleStartRequest (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        ApiResponse<BixbyResponse> HandleStartRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        BixbyResponse HandleStopRequest (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        ApiResponse<BixbyResponse> HandleStopRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        BixbyResponse HandleWelcomeRequest (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        ApiResponse<BixbyResponse> HandleWelcomeRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        BixbyResponse HandleYesRequest (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        ApiResponse<BixbyResponse> HandleYesRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actionName"></param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        System.Threading.Tasks.Task<BixbyResponse> HandleCustomRequestAsync (string actionName, string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actionName"></param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleCustomRequestAsyncWithHttpInfo (string actionName, string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        System.Threading.Tasks.Task<BixbyResponse> HandleDynamicRequestAsync (string applicationId = null, string applicationSecret = null, BixbyGeneralQuestionRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleDynamicRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyGeneralQuestionRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        System.Threading.Tasks.Task<BixbyResponse> HandleEventGeneralSearchRequestAsync (string applicationId = null, string applicationSecret = null, BixbyEventSearchRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleEventGeneralSearchRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyEventSearchRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        System.Threading.Tasks.Task<BixbyResponse> HandleEventLocationSearchRequestAsync (string applicationId = null, string applicationSecret = null, BixbyEventSearchRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleEventLocationSearchRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyEventSearchRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        System.Threading.Tasks.Task<BixbyResponse> HandleEventStartTimeSearchRequestAsync (string applicationId = null, string applicationSecret = null, BixbyEventSearchRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleEventStartTimeSearchRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyEventSearchRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        System.Threading.Tasks.Task<BixbyResponse> HandleEventStatusSearchRequestAsync (string applicationId = null, string applicationSecret = null, BixbyEventSearchRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleEventStatusSearchRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyEventSearchRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        System.Threading.Tasks.Task<BixbyResponse> HandleGeneralQuestionRequestAsync (string applicationId = null, string applicationSecret = null, BixbyGeneralQuestionRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleGeneralQuestionRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyGeneralQuestionRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        System.Threading.Tasks.Task<BixbyResponse> HandleGoToStepRequestAsync (string applicationId = null, string applicationSecret = null, BixbyGoToStepRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleGoToStepRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyGoToStepRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        System.Threading.Tasks.Task<BixbyResponse> HandleHelpRequestAsync (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleHelpRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        System.Threading.Tasks.Task<BixbyResponse> HandleLatestMessageRequestAsync (string applicationId = null, string applicationSecret = null, BixbyLatestMessageRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleLatestMessageRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyLatestMessageRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        System.Threading.Tasks.Task<BixbyResponse> HandleListItemSelectRequestAsync (string applicationId = null, string applicationSecret = null, BixbyItemSelectedRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleListItemSelectRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyItemSelectedRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        System.Threading.Tasks.Task<BixbyResponse> HandleMoreRequestAsync (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleMoreRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        System.Threading.Tasks.Task<BixbyResponse> HandleNextRequestAsync (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleNextRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        System.Threading.Tasks.Task<BixbyResponse> HandleNoRequestAsync (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleNoRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        System.Threading.Tasks.Task<BixbyResponse> HandleNumberRequestAsync (string applicationId = null, string applicationSecret = null, BixbyNumberRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleNumberRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyNumberRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        System.Threading.Tasks.Task<BixbyResponse> HandlePrevisousRequestAsync (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandlePrevisousRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        System.Threading.Tasks.Task<BixbyResponse> HandleRecipeDetailsRequestAsync (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleRecipeDetailsRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        System.Threading.Tasks.Task<BixbyResponse> HandleRecipeSearchRequestAsync (string applicationId = null, string applicationSecret = null, BixbyRecipeSearchRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleRecipeSearchRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyRecipeSearchRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        System.Threading.Tasks.Task<BixbyResponse> HandleStartOverRequestAsync (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleStartOverRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        System.Threading.Tasks.Task<BixbyResponse> HandleStartRequestAsync (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleStartRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        System.Threading.Tasks.Task<BixbyResponse> HandleStopRequestAsync (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleStopRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        System.Threading.Tasks.Task<BixbyResponse> HandleWelcomeRequestAsync (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleWelcomeRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        System.Threading.Tasks.Task<BixbyResponse> HandleYesRequestAsync (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleYesRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BixbyApi : IBixbyApi
    {
        private Voicify.Sdk.Assistant.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BixbyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BixbyApi(String basePath)
        {
            this.Configuration = new Voicify.Sdk.Assistant.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Voicify.Sdk.Assistant.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BixbyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BixbyApi(Voicify.Sdk.Assistant.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Voicify.Sdk.Assistant.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Voicify.Sdk.Assistant.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Voicify.Sdk.Assistant.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Voicify.Sdk.Assistant.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actionName"></param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        public BixbyResponse HandleCustomRequest (string actionName, string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = HandleCustomRequestWithHttpInfo(actionName, applicationId, applicationSecret, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actionName"></param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        public ApiResponse< BixbyResponse > HandleCustomRequestWithHttpInfo (string actionName, string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {
            // verify the required parameter 'actionName' is set
            if (actionName == null)
                throw new ApiException(400, "Missing required parameter 'actionName' when calling BixbyApi->HandleCustomRequest");

            var localVarPath = "/api/Bixby/HandleRequest/Custom/{actionName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (actionName != null) localVarPathParams.Add("actionName", this.Configuration.ApiClient.ParameterToString(actionName)); // path parameter
            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleCustomRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actionName"></param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        public async System.Threading.Tasks.Task<BixbyResponse> HandleCustomRequestAsync (string actionName, string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = await HandleCustomRequestAsyncWithHttpInfo(actionName, applicationId, applicationSecret, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actionName"></param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleCustomRequestAsyncWithHttpInfo (string actionName, string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {
            // verify the required parameter 'actionName' is set
            if (actionName == null)
                throw new ApiException(400, "Missing required parameter 'actionName' when calling BixbyApi->HandleCustomRequest");

            var localVarPath = "/api/Bixby/HandleRequest/Custom/{actionName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (actionName != null) localVarPathParams.Add("actionName", this.Configuration.ApiClient.ParameterToString(actionName)); // path parameter
            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleCustomRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        public BixbyResponse HandleDynamicRequest (string applicationId = null, string applicationSecret = null, BixbyGeneralQuestionRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = HandleDynamicRequestWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        public ApiResponse< BixbyResponse > HandleDynamicRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyGeneralQuestionRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/Dynamic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleDynamicRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        public async System.Threading.Tasks.Task<BixbyResponse> HandleDynamicRequestAsync (string applicationId = null, string applicationSecret = null, BixbyGeneralQuestionRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = await HandleDynamicRequestAsyncWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleDynamicRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyGeneralQuestionRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/Dynamic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleDynamicRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        public BixbyResponse HandleEventGeneralSearchRequest (string applicationId = null, string applicationSecret = null, BixbyEventSearchRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = HandleEventGeneralSearchRequestWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        public ApiResponse< BixbyResponse > HandleEventGeneralSearchRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyEventSearchRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/EventGeneralSearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleEventGeneralSearchRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        public async System.Threading.Tasks.Task<BixbyResponse> HandleEventGeneralSearchRequestAsync (string applicationId = null, string applicationSecret = null, BixbyEventSearchRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = await HandleEventGeneralSearchRequestAsyncWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleEventGeneralSearchRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyEventSearchRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/EventGeneralSearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleEventGeneralSearchRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        public BixbyResponse HandleEventLocationSearchRequest (string applicationId = null, string applicationSecret = null, BixbyEventSearchRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = HandleEventLocationSearchRequestWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        public ApiResponse< BixbyResponse > HandleEventLocationSearchRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyEventSearchRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/EventLocationSearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleEventLocationSearchRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        public async System.Threading.Tasks.Task<BixbyResponse> HandleEventLocationSearchRequestAsync (string applicationId = null, string applicationSecret = null, BixbyEventSearchRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = await HandleEventLocationSearchRequestAsyncWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleEventLocationSearchRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyEventSearchRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/EventLocationSearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleEventLocationSearchRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        public BixbyResponse HandleEventStartTimeSearchRequest (string applicationId = null, string applicationSecret = null, BixbyEventSearchRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = HandleEventStartTimeSearchRequestWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        public ApiResponse< BixbyResponse > HandleEventStartTimeSearchRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyEventSearchRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/EventStartTimeSearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleEventStartTimeSearchRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        public async System.Threading.Tasks.Task<BixbyResponse> HandleEventStartTimeSearchRequestAsync (string applicationId = null, string applicationSecret = null, BixbyEventSearchRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = await HandleEventStartTimeSearchRequestAsyncWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleEventStartTimeSearchRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyEventSearchRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/EventStartTimeSearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleEventStartTimeSearchRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        public BixbyResponse HandleEventStatusSearchRequest (string applicationId = null, string applicationSecret = null, BixbyEventSearchRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = HandleEventStatusSearchRequestWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        public ApiResponse< BixbyResponse > HandleEventStatusSearchRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyEventSearchRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/EventStatusSearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleEventStatusSearchRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        public async System.Threading.Tasks.Task<BixbyResponse> HandleEventStatusSearchRequestAsync (string applicationId = null, string applicationSecret = null, BixbyEventSearchRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = await HandleEventStatusSearchRequestAsyncWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleEventStatusSearchRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyEventSearchRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/EventStatusSearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleEventStatusSearchRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        public BixbyResponse HandleGeneralQuestionRequest (string applicationId = null, string applicationSecret = null, BixbyGeneralQuestionRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = HandleGeneralQuestionRequestWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        public ApiResponse< BixbyResponse > HandleGeneralQuestionRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyGeneralQuestionRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/GeneralQuestion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleGeneralQuestionRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        public async System.Threading.Tasks.Task<BixbyResponse> HandleGeneralQuestionRequestAsync (string applicationId = null, string applicationSecret = null, BixbyGeneralQuestionRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = await HandleGeneralQuestionRequestAsyncWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleGeneralQuestionRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyGeneralQuestionRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/GeneralQuestion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleGeneralQuestionRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        public BixbyResponse HandleGoToStepRequest (string applicationId = null, string applicationSecret = null, BixbyGoToStepRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = HandleGoToStepRequestWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        public ApiResponse< BixbyResponse > HandleGoToStepRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyGoToStepRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/GoToStep";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleGoToStepRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        public async System.Threading.Tasks.Task<BixbyResponse> HandleGoToStepRequestAsync (string applicationId = null, string applicationSecret = null, BixbyGoToStepRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = await HandleGoToStepRequestAsyncWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleGoToStepRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyGoToStepRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/GoToStep";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleGoToStepRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        public BixbyResponse HandleHelpRequest (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = HandleHelpRequestWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        public ApiResponse< BixbyResponse > HandleHelpRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/Help";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleHelpRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        public async System.Threading.Tasks.Task<BixbyResponse> HandleHelpRequestAsync (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = await HandleHelpRequestAsyncWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleHelpRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/Help";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleHelpRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        public BixbyResponse HandleLatestMessageRequest (string applicationId = null, string applicationSecret = null, BixbyLatestMessageRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = HandleLatestMessageRequestWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        public ApiResponse< BixbyResponse > HandleLatestMessageRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyLatestMessageRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/LatestMessage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleLatestMessageRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        public async System.Threading.Tasks.Task<BixbyResponse> HandleLatestMessageRequestAsync (string applicationId = null, string applicationSecret = null, BixbyLatestMessageRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = await HandleLatestMessageRequestAsyncWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleLatestMessageRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyLatestMessageRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/LatestMessage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleLatestMessageRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        public BixbyResponse HandleListItemSelectRequest (string applicationId = null, string applicationSecret = null, BixbyItemSelectedRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = HandleListItemSelectRequestWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        public ApiResponse< BixbyResponse > HandleListItemSelectRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyItemSelectedRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/ListItemSelect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleListItemSelectRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        public async System.Threading.Tasks.Task<BixbyResponse> HandleListItemSelectRequestAsync (string applicationId = null, string applicationSecret = null, BixbyItemSelectedRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = await HandleListItemSelectRequestAsyncWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleListItemSelectRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyItemSelectedRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/ListItemSelect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleListItemSelectRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        public BixbyResponse HandleMoreRequest (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = HandleMoreRequestWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        public ApiResponse< BixbyResponse > HandleMoreRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/More";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleMoreRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        public async System.Threading.Tasks.Task<BixbyResponse> HandleMoreRequestAsync (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = await HandleMoreRequestAsyncWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleMoreRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/More";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleMoreRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        public BixbyResponse HandleNextRequest (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = HandleNextRequestWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        public ApiResponse< BixbyResponse > HandleNextRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/Next";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleNextRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        public async System.Threading.Tasks.Task<BixbyResponse> HandleNextRequestAsync (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = await HandleNextRequestAsyncWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleNextRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/Next";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleNextRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        public BixbyResponse HandleNoRequest (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = HandleNoRequestWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        public ApiResponse< BixbyResponse > HandleNoRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/No";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleNoRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        public async System.Threading.Tasks.Task<BixbyResponse> HandleNoRequestAsync (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = await HandleNoRequestAsyncWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleNoRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/No";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleNoRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        public BixbyResponse HandleNumberRequest (string applicationId = null, string applicationSecret = null, BixbyNumberRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = HandleNumberRequestWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        public ApiResponse< BixbyResponse > HandleNumberRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyNumberRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/Number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleNumberRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        public async System.Threading.Tasks.Task<BixbyResponse> HandleNumberRequestAsync (string applicationId = null, string applicationSecret = null, BixbyNumberRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = await HandleNumberRequestAsyncWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleNumberRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyNumberRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/Number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleNumberRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        public BixbyResponse HandlePrevisousRequest (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = HandlePrevisousRequestWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        public ApiResponse< BixbyResponse > HandlePrevisousRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/Previous";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandlePrevisousRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        public async System.Threading.Tasks.Task<BixbyResponse> HandlePrevisousRequestAsync (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = await HandlePrevisousRequestAsyncWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandlePrevisousRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/Previous";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandlePrevisousRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        public BixbyResponse HandleRecipeDetailsRequest (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = HandleRecipeDetailsRequestWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        public ApiResponse< BixbyResponse > HandleRecipeDetailsRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/RecipeDetails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleRecipeDetailsRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        public async System.Threading.Tasks.Task<BixbyResponse> HandleRecipeDetailsRequestAsync (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = await HandleRecipeDetailsRequestAsyncWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleRecipeDetailsRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/RecipeDetails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleRecipeDetailsRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        public BixbyResponse HandleRecipeSearchRequest (string applicationId = null, string applicationSecret = null, BixbyRecipeSearchRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = HandleRecipeSearchRequestWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        public ApiResponse< BixbyResponse > HandleRecipeSearchRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyRecipeSearchRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/RecipeSearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleRecipeSearchRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        public async System.Threading.Tasks.Task<BixbyResponse> HandleRecipeSearchRequestAsync (string applicationId = null, string applicationSecret = null, BixbyRecipeSearchRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = await HandleRecipeSearchRequestAsyncWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleRecipeSearchRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyRecipeSearchRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/RecipeSearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleRecipeSearchRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        public BixbyResponse HandleStartOverRequest (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = HandleStartOverRequestWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        public ApiResponse< BixbyResponse > HandleStartOverRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/StartOver";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleStartOverRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        public async System.Threading.Tasks.Task<BixbyResponse> HandleStartOverRequestAsync (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = await HandleStartOverRequestAsyncWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleStartOverRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/StartOver";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleStartOverRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        public BixbyResponse HandleStartRequest (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = HandleStartRequestWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        public ApiResponse< BixbyResponse > HandleStartRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/Start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleStartRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        public async System.Threading.Tasks.Task<BixbyResponse> HandleStartRequestAsync (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = await HandleStartRequestAsyncWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleStartRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/Start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleStartRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        public BixbyResponse HandleStopRequest (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = HandleStopRequestWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        public ApiResponse< BixbyResponse > HandleStopRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/Stop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleStopRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        public async System.Threading.Tasks.Task<BixbyResponse> HandleStopRequestAsync (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = await HandleStopRequestAsyncWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleStopRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/Stop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleStopRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        public BixbyResponse HandleWelcomeRequest (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = HandleWelcomeRequestWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        public ApiResponse< BixbyResponse > HandleWelcomeRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/Welcome";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleWelcomeRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        public async System.Threading.Tasks.Task<BixbyResponse> HandleWelcomeRequestAsync (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = await HandleWelcomeRequestAsyncWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleWelcomeRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/Welcome";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleWelcomeRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>BixbyResponse</returns>
        public BixbyResponse HandleYesRequest (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = HandleYesRequestWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of BixbyResponse</returns>
        public ApiResponse< BixbyResponse > HandleYesRequestWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/Yes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleYesRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of BixbyResponse</returns>
        public async System.Threading.Tasks.Task<BixbyResponse> HandleYesRequestAsync (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {
             ApiResponse<BixbyResponse> localVarResponse = await HandleYesRequestAsyncWithHttpInfo(applicationId, applicationSecret, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Assistant.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="applicationSecret"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (BixbyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BixbyResponse>> HandleYesRequestAsyncWithHttpInfo (string applicationId = null, string applicationSecret = null, BixbyActionRequest model = null)
        {

            var localVarPath = "/api/Bixby/HandleRequest/Yes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (applicationSecret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationSecret", applicationSecret)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HandleYesRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BixbyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BixbyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BixbyResponse)));
        }

    }
}
